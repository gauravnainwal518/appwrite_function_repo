const axios = require('axios');

module.exports = async ({ req, res, log, error }) => {
  // Enhanced logging
  log("Function execution started");
  log("Request headers:", JSON.stringify(req.headers));
  log("Raw body type:", typeof req.body);
  log("Raw body content:", req.body);

  try {
    // Validate body exists
    if (!req.body) {
      throw new Error("Request body is missing");
    }

    // Parse the incoming request
    let parsedRequest;
    try {
      // Handle both string and object bodies
      parsedRequest = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
      
      // Handle Appwrite function execution wrapper
      if (parsedRequest.data) {
        try {
          parsedRequest = JSON.parse(parsedRequest.data);
        } catch (innerError) {
          throw new Error(`Failed to parse inner data: ${innerError.message}`);
        }
      }
    } catch (parseError) {
      throw new Error(`Invalid request format: ${parseError.message}`);
    }

    log("Parsed request:", parsedRequest);

    // Extract input text with multiple fallbacks
    const inputText = parsedRequest.inputText || 
                     parsedRequest.text || 
                     (typeof parsedRequest === 'string' ? parsedRequest : null);

    if (!inputText || typeof inputText !== 'string') {
      throw new Error("Missing or invalid input text");
    }

    log("Processing input text (first 100 chars):", inputText.substring(0, 100));

    // Verify API key
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error("Server configuration error - API key missing");
    }

    // Call Gemini API
    const geminiResponse = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
      {
        contents: [{ parts: [{ text: inputText }] }]
      },
      {
        headers: { "Content-Type": "application/json" },
        timeout: 30000
      }
    );

    // Process response
    const generatedText = geminiResponse.data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    if (!generatedText) {
      throw new Error("No content generated by AI");
    }

    return res.json({
      statusCode: 200,
      output: generatedText
    });

  } catch (err) {
    error("Function execution failed:", err.message, err.stack);

    // Determine appropriate status code
    const statusCode = err.message.includes("Invalid") || 
                      err.message.includes("Missing") ? 400 : 500;

    return res.json({
      statusCode: statusCode,
      error: err.message,
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    });
  }
};